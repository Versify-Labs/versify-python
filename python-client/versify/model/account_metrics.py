# coding: utf-8

"""
    Versify API

    Versify API documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from versify import schemas  # noqa: F401


class AccountMetrics(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Base model for all other models
    """


    class MetaOapg:
        
        class properties:
            contacts = schemas.IntSchema
            journey_runs = schemas.IntSchema
            journeys = schemas.IntSchema
            mints = schemas.IntSchema
            redemptions = schemas.IntSchema
            rewards = schemas.IntSchema
            __annotations__ = {
                "contacts": contacts,
                "journey_runs": journey_runs,
                "journeys": journeys,
                "mints": mints,
                "redemptions": redemptions,
                "rewards": rewards,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contacts"]) -> MetaOapg.properties.contacts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["journey_runs"]) -> MetaOapg.properties.journey_runs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["journeys"]) -> MetaOapg.properties.journeys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mints"]) -> MetaOapg.properties.mints: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redemptions"]) -> MetaOapg.properties.redemptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rewards"]) -> MetaOapg.properties.rewards: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contacts", "journey_runs", "journeys", "mints", "redemptions", "rewards", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contacts"]) -> typing.Union[MetaOapg.properties.contacts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["journey_runs"]) -> typing.Union[MetaOapg.properties.journey_runs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["journeys"]) -> typing.Union[MetaOapg.properties.journeys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mints"]) -> typing.Union[MetaOapg.properties.mints, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redemptions"]) -> typing.Union[MetaOapg.properties.redemptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rewards"]) -> typing.Union[MetaOapg.properties.rewards, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contacts", "journey_runs", "journeys", "mints", "redemptions", "rewards", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        contacts: typing.Union[MetaOapg.properties.contacts, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        journey_runs: typing.Union[MetaOapg.properties.journey_runs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        journeys: typing.Union[MetaOapg.properties.journeys, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        mints: typing.Union[MetaOapg.properties.mints, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        redemptions: typing.Union[MetaOapg.properties.redemptions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rewards: typing.Union[MetaOapg.properties.rewards, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountMetrics':
        return super().__new__(
            cls,
            *_args,
            contacts=contacts,
            journey_runs=journey_runs,
            journeys=journeys,
            mints=mints,
            redemptions=redemptions,
            rewards=rewards,
            _configuration=_configuration,
            **kwargs,
        )
