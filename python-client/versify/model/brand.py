# coding: utf-8

"""
    Versify API

    Versify API documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from versify import schemas  # noqa: F401


class Brand(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A brand used to customize the look and feel of an account.
    """


    class MetaOapg:
        
        class properties:
            action_color = schemas.StrSchema
            background_color = schemas.StrSchema
            
            
            class logo(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'uri'
                    max_length = 65536
                    min_length = 1
            primary_color = schemas.StrSchema
            secondary_color = schemas.StrSchema
            tertiary_color = schemas.StrSchema
            wallet_action_color = schemas.StrSchema
            wallet_background_color = schemas.StrSchema
            
            
            class wallet_display_filters(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Query']:
                        return Query
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Query'], typing.List['Query']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'wallet_display_filters':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Query':
                    return super().__getitem__(i)
            
            
            class wallet_position(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            WalletPosition,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'wallet_position':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            wallet_welcome_message = schemas.StrSchema
            __annotations__ = {
                "action_color": action_color,
                "background_color": background_color,
                "logo": logo,
                "primary_color": primary_color,
                "secondary_color": secondary_color,
                "tertiary_color": tertiary_color,
                "wallet_action_color": wallet_action_color,
                "wallet_background_color": wallet_background_color,
                "wallet_display_filters": wallet_display_filters,
                "wallet_position": wallet_position,
                "wallet_welcome_message": wallet_welcome_message,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action_color"]) -> MetaOapg.properties.action_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["background_color"]) -> MetaOapg.properties.background_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo"]) -> MetaOapg.properties.logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["primary_color"]) -> MetaOapg.properties.primary_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secondary_color"]) -> MetaOapg.properties.secondary_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tertiary_color"]) -> MetaOapg.properties.tertiary_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_action_color"]) -> MetaOapg.properties.wallet_action_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_background_color"]) -> MetaOapg.properties.wallet_background_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_display_filters"]) -> MetaOapg.properties.wallet_display_filters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_position"]) -> MetaOapg.properties.wallet_position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["wallet_welcome_message"]) -> MetaOapg.properties.wallet_welcome_message: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["action_color", "background_color", "logo", "primary_color", "secondary_color", "tertiary_color", "wallet_action_color", "wallet_background_color", "wallet_display_filters", "wallet_position", "wallet_welcome_message", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action_color"]) -> typing.Union[MetaOapg.properties.action_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["background_color"]) -> typing.Union[MetaOapg.properties.background_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo"]) -> typing.Union[MetaOapg.properties.logo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["primary_color"]) -> typing.Union[MetaOapg.properties.primary_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secondary_color"]) -> typing.Union[MetaOapg.properties.secondary_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tertiary_color"]) -> typing.Union[MetaOapg.properties.tertiary_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_action_color"]) -> typing.Union[MetaOapg.properties.wallet_action_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_background_color"]) -> typing.Union[MetaOapg.properties.wallet_background_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_display_filters"]) -> typing.Union[MetaOapg.properties.wallet_display_filters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_position"]) -> typing.Union[MetaOapg.properties.wallet_position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["wallet_welcome_message"]) -> typing.Union[MetaOapg.properties.wallet_welcome_message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action_color", "background_color", "logo", "primary_color", "secondary_color", "tertiary_color", "wallet_action_color", "wallet_background_color", "wallet_display_filters", "wallet_position", "wallet_welcome_message", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        action_color: typing.Union[MetaOapg.properties.action_color, str, schemas.Unset] = schemas.unset,
        background_color: typing.Union[MetaOapg.properties.background_color, str, schemas.Unset] = schemas.unset,
        logo: typing.Union[MetaOapg.properties.logo, str, schemas.Unset] = schemas.unset,
        primary_color: typing.Union[MetaOapg.properties.primary_color, str, schemas.Unset] = schemas.unset,
        secondary_color: typing.Union[MetaOapg.properties.secondary_color, str, schemas.Unset] = schemas.unset,
        tertiary_color: typing.Union[MetaOapg.properties.tertiary_color, str, schemas.Unset] = schemas.unset,
        wallet_action_color: typing.Union[MetaOapg.properties.wallet_action_color, str, schemas.Unset] = schemas.unset,
        wallet_background_color: typing.Union[MetaOapg.properties.wallet_background_color, str, schemas.Unset] = schemas.unset,
        wallet_display_filters: typing.Union[MetaOapg.properties.wallet_display_filters, list, tuple, schemas.Unset] = schemas.unset,
        wallet_position: typing.Union[MetaOapg.properties.wallet_position, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        wallet_welcome_message: typing.Union[MetaOapg.properties.wallet_welcome_message, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Brand':
        return super().__new__(
            cls,
            *_args,
            action_color=action_color,
            background_color=background_color,
            logo=logo,
            primary_color=primary_color,
            secondary_color=secondary_color,
            tertiary_color=tertiary_color,
            wallet_action_color=wallet_action_color,
            wallet_background_color=wallet_background_color,
            wallet_display_filters=wallet_display_filters,
            wallet_position=wallet_position,
            wallet_welcome_message=wallet_welcome_message,
            _configuration=_configuration,
            **kwargs,
        )

from versify.model.query import Query
from versify.model.wallet_position import WalletPosition
