# coding: utf-8

"""
    Versify API

    Versify API documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from versify import schemas  # noqa: F401


class Message(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A message document in the database.
    """


    class MetaOapg:
        required = {
            "account",
        }
        
        class properties:
            account = schemas.StrSchema
            _id = schemas.StrSchema
            
            
            class bcc_list(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bcc_list':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class cc_list(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cc_list':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            content_body = schemas.StrSchema
            content_preheader = schemas.StrSchema
            content_subject = schemas.StrSchema
            created = schemas.IntSchema
            from_email = schemas.StrSchema
            from_name = schemas.StrSchema
            
            
            class message_type(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            MessageType,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'message_type':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            metadata = schemas.DictSchema
            object = schemas.StrSchema
            reply_to_email = schemas.StrSchema
            status = schemas.StrSchema
            to_contact = schemas.StrSchema
            to_email = schemas.StrSchema
            to_name = schemas.StrSchema
            updated = schemas.IntSchema
            __annotations__ = {
                "account": account,
                "_id": _id,
                "bcc_list": bcc_list,
                "cc_list": cc_list,
                "content_body": content_body,
                "content_preheader": content_preheader,
                "content_subject": content_subject,
                "created": created,
                "from_email": from_email,
                "from_name": from_name,
                "message_type": message_type,
                "metadata": metadata,
                "object": object,
                "reply_to_email": reply_to_email,
                "status": status,
                "to_contact": to_contact,
                "to_email": to_email,
                "to_name": to_name,
                "updated": updated,
            }
    
    account: MetaOapg.properties.account
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bcc_list"]) -> MetaOapg.properties.bcc_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cc_list"]) -> MetaOapg.properties.cc_list: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_body"]) -> MetaOapg.properties.content_body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_preheader"]) -> MetaOapg.properties.content_preheader: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_subject"]) -> MetaOapg.properties.content_subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_email"]) -> MetaOapg.properties.from_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_name"]) -> MetaOapg.properties.from_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message_type"]) -> MetaOapg.properties.message_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_to_email"]) -> MetaOapg.properties.reply_to_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to_contact"]) -> MetaOapg.properties.to_contact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to_email"]) -> MetaOapg.properties.to_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["to_name"]) -> MetaOapg.properties.to_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "_id", "bcc_list", "cc_list", "content_body", "content_preheader", "content_subject", "created", "from_email", "from_name", "message_type", "metadata", "object", "reply_to_email", "status", "to_contact", "to_email", "to_name", "updated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> typing.Union[MetaOapg.properties._id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bcc_list"]) -> typing.Union[MetaOapg.properties.bcc_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cc_list"]) -> typing.Union[MetaOapg.properties.cc_list, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_body"]) -> typing.Union[MetaOapg.properties.content_body, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_preheader"]) -> typing.Union[MetaOapg.properties.content_preheader, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_subject"]) -> typing.Union[MetaOapg.properties.content_subject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_email"]) -> typing.Union[MetaOapg.properties.from_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_name"]) -> typing.Union[MetaOapg.properties.from_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message_type"]) -> typing.Union[MetaOapg.properties.message_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_to_email"]) -> typing.Union[MetaOapg.properties.reply_to_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to_contact"]) -> typing.Union[MetaOapg.properties.to_contact, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to_email"]) -> typing.Union[MetaOapg.properties.to_email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["to_name"]) -> typing.Union[MetaOapg.properties.to_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "_id", "bcc_list", "cc_list", "content_body", "content_preheader", "content_subject", "created", "from_email", "from_name", "message_type", "metadata", "object", "reply_to_email", "status", "to_contact", "to_email", "to_name", "updated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        account: typing.Union[MetaOapg.properties.account, str, ],
        _id: typing.Union[MetaOapg.properties._id, str, schemas.Unset] = schemas.unset,
        bcc_list: typing.Union[MetaOapg.properties.bcc_list, list, tuple, schemas.Unset] = schemas.unset,
        cc_list: typing.Union[MetaOapg.properties.cc_list, list, tuple, schemas.Unset] = schemas.unset,
        content_body: typing.Union[MetaOapg.properties.content_body, str, schemas.Unset] = schemas.unset,
        content_preheader: typing.Union[MetaOapg.properties.content_preheader, str, schemas.Unset] = schemas.unset,
        content_subject: typing.Union[MetaOapg.properties.content_subject, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        from_email: typing.Union[MetaOapg.properties.from_email, str, schemas.Unset] = schemas.unset,
        from_name: typing.Union[MetaOapg.properties.from_name, str, schemas.Unset] = schemas.unset,
        message_type: typing.Union[MetaOapg.properties.message_type, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
        reply_to_email: typing.Union[MetaOapg.properties.reply_to_email, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        to_contact: typing.Union[MetaOapg.properties.to_contact, str, schemas.Unset] = schemas.unset,
        to_email: typing.Union[MetaOapg.properties.to_email, str, schemas.Unset] = schemas.unset,
        to_name: typing.Union[MetaOapg.properties.to_name, str, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Message':
        return super().__new__(
            cls,
            *_args,
            account=account,
            _id=_id,
            bcc_list=bcc_list,
            cc_list=cc_list,
            content_body=content_body,
            content_preheader=content_preheader,
            content_subject=content_subject,
            created=created,
            from_email=from_email,
            from_name=from_name,
            message_type=message_type,
            metadata=metadata,
            object=object,
            reply_to_email=reply_to_email,
            status=status,
            to_contact=to_contact,
            to_email=to_email,
            to_name=to_name,
            updated=updated,
            _configuration=_configuration,
            **kwargs,
        )

from versify.model.message_type import MessageType
