# coding: utf-8

"""
    Versify API

    Versify API documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from versify import schemas  # noqa: F401


class Operator(
    schemas.EnumBase,
    schemas.StrSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An enumeration.
    """
    
    @schemas.classproperty
    def AND(cls):
        return cls("AND")
    
    @schemas.classproperty
    def OR(cls):
        return cls("OR")
    
    @schemas.classproperty
    def NOT(cls):
        return cls("NOT")
    
    @schemas.classproperty
    def EQUALS(cls):
        return cls("=")
    
    @schemas.classproperty
    def EXCLAMATION_MARKEQUALS(cls):
        return cls("!=")
    
    @schemas.classproperty
    def EXISTS(cls):
        return cls("EXISTS")
    
    @schemas.classproperty
    def EXISTS(cls):
        return cls("!EXISTS")
    
    @schemas.classproperty
    def TILDE(cls):
        return cls("~")
    
    @schemas.classproperty
    def EXCLAMATION_MARKTILDE(cls):
        return cls("!~")
    
    @schemas.classproperty
    def CIRCUMFLEX_ACCENT(cls):
        return cls("^")
    
    @schemas.classproperty
    def EXCLAMATION_MARKCIRCUMFLEX_ACCENT(cls):
        return cls("!^")
    
    @schemas.classproperty
    def DOLLAR(cls):
        return cls("$")
    
    @schemas.classproperty
    def EXCLAMATION_MARKDOLLAR(cls):
        return cls("!$")
    
    @schemas.classproperty
    def GREATER_THAN(cls):
        return cls(">")
    
    @schemas.classproperty
    def GREATER_THAN_EQUALS(cls):
        return cls(">=")
    
    @schemas.classproperty
    def LESS_THAN(cls):
        return cls("<")
    
    @schemas.classproperty
    def LESS_THAN_EQUALS(cls):
        return cls("<=")
    
    @schemas.classproperty
    def IN(cls):
        return cls("IN")
    
    @schemas.classproperty
    def NIN(cls):
        return cls("NIN")
