# coding: utf-8

"""
    Versify API

    Versify API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from versify import schemas  # noqa: F401


class BodyAuthenticateV2AuthAuthenticatePost(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "code",
            "method_id",
            "custom_claims",
        }
        
        class properties:
            code = schemas.StrSchema
            custom_claims = schemas.DictSchema
            method_id = schemas.StrSchema
            __annotations__ = {
                "code": code,
                "custom_claims": custom_claims,
                "method_id": method_id,
            }
    
    code: MetaOapg.properties.code
    method_id: MetaOapg.properties.method_id
    custom_claims: MetaOapg.properties.custom_claims
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_claims"]) -> MetaOapg.properties.custom_claims: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["method_id"]) -> MetaOapg.properties.method_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "custom_claims", "method_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_claims"]) -> MetaOapg.properties.custom_claims: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["method_id"]) -> MetaOapg.properties.method_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "custom_claims", "method_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        code: typing.Union[MetaOapg.properties.code, str, ],
        method_id: typing.Union[MetaOapg.properties.method_id, str, ],
        custom_claims: typing.Union[MetaOapg.properties.custom_claims, dict, frozendict.frozendict, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'BodyAuthenticateV2AuthAuthenticatePost':
        return super().__new__(
            cls,
            *_args,
            code=code,
            method_id=method_id,
            custom_claims=custom_claims,
            _configuration=_configuration,
            **kwargs,
        )
