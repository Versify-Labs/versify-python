# coding: utf-8

"""
    Versify API

    Versify API documentation  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from versify import schemas  # noqa: F401


class Redemption(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A redemption document in the database.
    """


    class MetaOapg:
        required = {
            "reward",
            "contact",
            "account",
        }
        
        class properties:
            account = schemas.StrSchema
            contact = schemas.StrSchema
            reward = schemas.StrSchema
            _id = schemas.StrSchema
            coupon_code = schemas.StrSchema
            created = schemas.IntSchema
            discount_amount = schemas.IntSchema
            discount_code = schemas.StrSchema
            gift_amount = schemas.IntSchema
            gift_code = schemas.StrSchema
            metadata = schemas.DictSchema
            object = schemas.StrSchema
            pass_barcode = schemas.StrSchema
            pass_platform = schemas.StrSchema
            pass_serial_number = schemas.StrSchema
            updated = schemas.IntSchema
            __annotations__ = {
                "account": account,
                "contact": contact,
                "reward": reward,
                "_id": _id,
                "coupon_code": coupon_code,
                "created": created,
                "discount_amount": discount_amount,
                "discount_code": discount_code,
                "gift_amount": gift_amount,
                "gift_code": gift_code,
                "metadata": metadata,
                "object": object,
                "pass_barcode": pass_barcode,
                "pass_platform": pass_platform,
                "pass_serial_number": pass_serial_number,
                "updated": updated,
            }
    
    reward: MetaOapg.properties.reward
    contact: MetaOapg.properties.contact
    account: MetaOapg.properties.account
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contact"]) -> MetaOapg.properties.contact: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reward"]) -> MetaOapg.properties.reward: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_id"]) -> MetaOapg.properties._id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coupon_code"]) -> MetaOapg.properties.coupon_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created"]) -> MetaOapg.properties.created: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount_amount"]) -> MetaOapg.properties.discount_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount_code"]) -> MetaOapg.properties.discount_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gift_amount"]) -> MetaOapg.properties.gift_amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gift_code"]) -> MetaOapg.properties.gift_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["object"]) -> MetaOapg.properties.object: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pass_barcode"]) -> MetaOapg.properties.pass_barcode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pass_platform"]) -> MetaOapg.properties.pass_platform: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pass_serial_number"]) -> MetaOapg.properties.pass_serial_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated"]) -> MetaOapg.properties.updated: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "contact", "reward", "_id", "coupon_code", "created", "discount_amount", "discount_code", "gift_amount", "gift_code", "metadata", "object", "pass_barcode", "pass_platform", "pass_serial_number", "updated", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contact"]) -> MetaOapg.properties.contact: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reward"]) -> MetaOapg.properties.reward: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_id"]) -> typing.Union[MetaOapg.properties._id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coupon_code"]) -> typing.Union[MetaOapg.properties.coupon_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created"]) -> typing.Union[MetaOapg.properties.created, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount_amount"]) -> typing.Union[MetaOapg.properties.discount_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount_code"]) -> typing.Union[MetaOapg.properties.discount_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gift_amount"]) -> typing.Union[MetaOapg.properties.gift_amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gift_code"]) -> typing.Union[MetaOapg.properties.gift_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["object"]) -> typing.Union[MetaOapg.properties.object, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pass_barcode"]) -> typing.Union[MetaOapg.properties.pass_barcode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pass_platform"]) -> typing.Union[MetaOapg.properties.pass_platform, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pass_serial_number"]) -> typing.Union[MetaOapg.properties.pass_serial_number, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated"]) -> typing.Union[MetaOapg.properties.updated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "contact", "reward", "_id", "coupon_code", "created", "discount_amount", "discount_code", "gift_amount", "gift_code", "metadata", "object", "pass_barcode", "pass_platform", "pass_serial_number", "updated", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        reward: typing.Union[MetaOapg.properties.reward, str, ],
        contact: typing.Union[MetaOapg.properties.contact, str, ],
        account: typing.Union[MetaOapg.properties.account, str, ],
        _id: typing.Union[MetaOapg.properties._id, str, schemas.Unset] = schemas.unset,
        coupon_code: typing.Union[MetaOapg.properties.coupon_code, str, schemas.Unset] = schemas.unset,
        created: typing.Union[MetaOapg.properties.created, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        discount_amount: typing.Union[MetaOapg.properties.discount_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        discount_code: typing.Union[MetaOapg.properties.discount_code, str, schemas.Unset] = schemas.unset,
        gift_amount: typing.Union[MetaOapg.properties.gift_amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        gift_code: typing.Union[MetaOapg.properties.gift_code, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        object: typing.Union[MetaOapg.properties.object, str, schemas.Unset] = schemas.unset,
        pass_barcode: typing.Union[MetaOapg.properties.pass_barcode, str, schemas.Unset] = schemas.unset,
        pass_platform: typing.Union[MetaOapg.properties.pass_platform, str, schemas.Unset] = schemas.unset,
        pass_serial_number: typing.Union[MetaOapg.properties.pass_serial_number, str, schemas.Unset] = schemas.unset,
        updated: typing.Union[MetaOapg.properties.updated, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Redemption':
        return super().__new__(
            cls,
            *_args,
            reward=reward,
            contact=contact,
            account=account,
            _id=_id,
            coupon_code=coupon_code,
            created=created,
            discount_amount=discount_amount,
            discount_code=discount_code,
            gift_amount=gift_amount,
            gift_code=gift_code,
            metadata=metadata,
            object=object,
            pass_barcode=pass_barcode,
            pass_platform=pass_platform,
            pass_serial_number=pass_serial_number,
            updated=updated,
            _configuration=_configuration,
            **kwargs,
        )
