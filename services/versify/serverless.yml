org: versify
app: versify
service: api

frameworkVersion: ">=2.24.0"

plugins:
  - serverless-python-requirements

custom:
  mongoDbUrl: ${ssm:/versify/services/mongo/db/url}
  mongoAccountsTrigger: ${ssm:/versify/services/mongo/accounts/trigger/id}
  mongoAirdropsTrigger: ${ssm:/versify/services/mongo/airdrops/trigger/id}
  mongoCollectionsTrigger: ${ssm:/versify/services/mongo/collections/trigger/id}
  mongoContactsTrigger: ${ssm:/versify/services/mongo/contacts/trigger/id}
  mongoMintLinksTrigger: ${ssm:/versify/services/mongo/mintLinks/trigger/id}
  mongoMintsTrigger: ${ssm:/versify/services/mongo/mints/trigger/id}
  mongoNotesTrigger: ${ssm:/versify/services/mongo/notes/trigger/id}
  mongoEventsTrigger: ${ssm:/versify/services/mongo/events/trigger/id}
  mongoProductsTrigger: ${ssm:/versify/services/mongo/products/trigger/id}
  mongoUsersTrigger: ${ssm:/versify/services/mongo/users/trigger/id}
  mongoWebhooksTrigger: ${ssm:/versify/services/mongo/webhooks/trigger/id}

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    ENVIRONMENT: ${opt:stage, 'dev'}
    LOG_LEVEL: INFO
    MONGO_DB_URL: ${self:custom.mongoDbUrl}
    POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
    POWERTOOLS_LOGGER_LOG_EVENT: true
    POWERTOOLS_METRICS_NAMESPACE: versify
    POWERTOOLS_SERVICE_NAME: api-service
    POWERTOOLS_TRACE_DISABLED: false
    SECRET_NAME: /versify/platform/secret
    STRIPE_GROWTH_PRICE: ${ssm:/versify/services/stripe/growth/price}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - events:*
          Resource:
            - arn:aws:events:${aws:region}:*:event-bus/*
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - "arn:aws:secretsmanager:${self:provider.region}:*:secret:/versify/platform/secret*"
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - "arn:aws:s3:::cdn.versifylabs.com"
            - "arn:aws:s3:::cdn.versifylabs.com/*"
            - "arn:aws:s3:::cdn-dev.versifylabs.com"
            - "arn:aws:s3:::cdn-dev.versifylabs.com/*"
  layers:
    - arn:aws:lambda:${aws:region}:017000801446:layer:AWSLambdaPowertoolsPython:26
  runtime: python3.9
  timeout: 30
  tracing:
    lambda: true

functions:
  API-AuthorizeAccount:
    handler: src.api.authorizer.authorize_account
    name: API-AuthorizeAccount
    description: API authorizer for accounts
  API-AuthorizeUser:
    handler: src.api.authorizer.authorize_user
    name: API-AuthorizeUser
    description: API authorizer for users
  API-PrivateEndpoints:
    handler: src.api.routes.handler
    name: API-PrivateEndpoints
    description: API endpoints relating to the Account object
    events:
      - http:
          method: post
          path: /v1/accounts
          operationId: CreateAccount
          authorizer:
            name: API-AuthorizeUser
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
            schemas:
              application/json: ${file(schemas/accounts/create.json)}
      - http:
          method: get
          path: /v1/accounts/{id}
          operationId: GetAccount
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
      - http:
          method: put
          path: /v1/accounts/{id}
          operationId: UpdateAccount
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/accounts/update.json)}
      - http:
          method: post
          path: /v1/accounts/{id}/billing
          operationId: CreateAccountBillingSession
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
      - http:
          method: post
          path: /v1/accounts/{id}/checkout
          operationId: CreateAccountCheckoutSession
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
      - http:
          method: post
          path: /v1/accounts/{id}/members
          operationId: CreateAccountMember
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
            schemas:
              application/json: ${file(schemas/accounts/create_member.json)}
      - http:
          method: get
          path: /v1/accounts/{id}/members
          operationId: ListAccountMembers
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
      - http:
          method: get
          path: /v1/accounts/{id}/invoices
          operationId: ListAccountInvoices
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
      - http:
          method: get
          path: /v1/accounts/{id}/subscriptions
          operationId: ListAccountSubscriptions
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
      - http:
          method: get
          path: /v1/airdrops
          operationId: ListAirdrops
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
                page_num: false
                page_size: false
                filter: false
                status: false
      - http:
          method: post
          path: /v1/airdrops
          operationId: CreateAirdrop
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/airdrops/create.json)}
      - http:
          method: get
          path: /v1/airdrops/{id}
          operationId: GetAirdrop
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: put
          path: /v1/airdrops/{id}
          operationId: UpdateAirdrop
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/airdrops/update.json)}
      - http:
          method: put
          path: /v1/airdrops/{id}/send
          operationId: SendAirdrop
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: get
          path: /v1/collections
          operationId: ListCollections
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                active: false
                contract_address: false
                expand: false
                page_num: false
                page_size: false
                filter: false
                signature: false
                status: false
      - http:
          method: post
          path: /v1/collections
          operationId: CreateCollection
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/collections/create.json)}
      - http:
          method: get
          path: /v1/collections/{id}
          operationId: GetCollection
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: put
          path: /v1/collections/{id}
          operationId: UpdateCollection
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/collections/update.json)}
      - http:
          method: get
          path: /v1/contacts
          operationId: ListContacts
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
              querystrings:
                active: false
                expand: false
                filter: false
                page_num: false
                page_size: false
                tags: false
      - http:
          method: post
          path: /v1/contacts
          operationId: CreateContact
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/contacts/create.json)}
      - http:
          method: get
          path: /v1/contacts/{id}
          operationId: GetContact
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: put
          path: /v1/contacts/{id}
          operationId: UpdateContact
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/contacts/update.json)}
      - http:
          method: get
          path: /v1/events
          operationId: ListEvents
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
                page_num: false
                page_size: false
                filter: false
                resource_id: false
                resource_type: false
                user: false
      - http:
          method: get
          path: /v1/mint_links
          operationId: ListMintLinks
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
                page_num: false
                page_size: false
                filter: false
                status: false
      - http:
          method: post
          path: /v1/mint_links
          operationId: CreateMintLink
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/mint_links/create.json)}
      - http:
          method: get
          path: /v1/mint_links/{id}
          operationId: GetMintLink
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: put
          path: /v1/mint_links/{id}
          operationId: UpdateMintLink
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/mint_links/update.json)}
      - http:
          method: put
          path: /v1/mint_links/{id}/archive
          operationId: ArchiveMintLink
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: get
          path: /v1/mints
          operationId: ListMints
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                airdrop: false
                expand: false
                mint_link: false
                page_num: false
                page_size: false
                filter: false
                signature: false
                status: false
                transaction: false
      - http:
          method: post
          path: /v1/mints
          operationId: CreateMint
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/mints/create.json)}
      - http:
          method: get
          path: /v1/mints/{id}
          operationId: GetMint
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: put
          path: /v1/mints/{id}/fulfill
          operationId: FulfillMint
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/mints/fulfill.json)}
      - http:
          method: get
          path: /v1/notes
          operationId: ListNotes
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
                page_num: false
                page_size: false
                filter: false
                resource_id: false
                resource_type: false
                user: false
      - http:
          method: post
          path: /v1/notes
          operationId: CreateNote
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/notes/create.json)}
      - http:
          method: delete
          path: /v1/notes/{id}
          operationId: DeleteNote
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: get
          path: /v1/products
          operationId: ListProducts
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
                page_num: false
                page_size: false
                filter: false
                status: false
      - http:
          method: post
          path: /v1/products
          operationId: CreateProduct
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/products/create.json)}
      - http:
          method: get
          path: /v1/products/{id}
          operationId: GetProduct
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
      - http:
          method: put
          path: /v1/products/{id}
          operationId: UpdateProduct
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/products/update.json)}
      - http:
          method: get
          path: /v1/search
          operationId: Search
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                conditions: false
                match: false
                search_type: true
                query: false
                vql: false
      - http:
          method: post
          path: /v1/users
          operationId: CreateUser
          authorizer:
            name: API-AuthorizeUser
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: true
          request:
            parameters:
              headers:
                Authorization: true
      - http:
          method: get
          path: /v1/webhooks
          operationId: ListWebhooks
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              querystrings:
                active: false
                enabled_events: false
                page_num: false
                page_size: false
      - http:
          method: post
          path: /v1/webhooks
          operationId: CreateWebhook
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
            schemas:
              application/json: ${file(schemas/webhooks/create.json)}
      - http:
          method: get
          path: /v1/webhooks/{id}
          operationId: GetWebhook
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
      - http:
          method: put
          path: /v1/webhooks/{id}
          operationId: UpdateWebhook
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/webhooks/update.json)}
      - http:
          method: delete
          path: /v1/webhooks/{id}
          operationId: DeleteWebhook
          authorizer:
            name: API-AuthorizeAccount
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
                Versify-Account: true
              paths:
                id: true
  API-PublicEndpoints:
    handler: src.api.routes.handler
    name: API-PublicEndpoints
    description: API endpoints that can be called by anyone, regardless of authentication.
    events:
      - http:
          method: get
          path: /public/mint_links/{id}
          operationId: GetMintLink
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
      - http:
          method: post
          path: /public/mints
          operationId: CreateMint
          authorizer:
            name: API-AuthorizeUser
            type: REQUEST
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              headers:
                Authorization: true
              querystrings:
                expand: false
            schemas:
              application/json: ${file(schemas/mints/create.json)}
      - http:
          method: get
          path: /public/mints/{id}
          operationId: GetMint
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
      - http:
          method: put
          path: /public/mints/{id}/fulfill
          operationId: FulfillMint
          cors:
            origin: "*"
            headers: "*"
            allowCredentials: false
          request:
            parameters:
              paths:
                id: true
            schemas:
              application/json: ${file(schemas/mints/fulfill.json)}
      - http:
          method: get
          path: /public/signatures/{id}
          operationId: GetSignature
          request:
            parameters:
              paths:
                id: true
  API-WebhookEndpoints:
    handler: src.api.routes.handler
    name: API-WebhookEndpoints
    description: API endpoints that can be called by partner webhooks.
    events:
      - http:
          method: post
          path: /webhook/alchemy
      - http:
          method: post
          path: /webhook/stripe
      - http:
          method: post
          path: /webhook/tatum
  EventConnector-MongoBusToPartnerBus:
    handler: src.subscribers.mongo.handler
    name: EventConnector-MongoBusToPartnerBus
    description: Consume events from Mongo and publish to PartnerBus
    events:
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAccountsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAirdropsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoCollectionsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoContactsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoEventsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintLinksTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoNotesTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoProductsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoUsersTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoWebhooksTrigger}"
          pattern:
            account:
              - ${aws:accountId}
  EventConnector-PartnerBusToVersifyBus:
    handler: src.subscribers.partners.handler
    name: EventConnector-PartnerBusToVersifyBus
    description: Consume events from PartnerBus and publish to VersifyBus
    events:
      # MongoAccountCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - account
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "account.created"}'
      # MongoAccountDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - account
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "account.deleted"}'
      # MongoAccountUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - account
              updateDescription:
                updatedFields:
                  status:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "account.updated"}'
      # MongoAccountTeamUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - account
              updateDescription:
                updatedFields:
                  settings:
                    auth:
                      - { "exists": false }
                    billing:
                      - { "exists": false }
                    dashboard:
                      - { "exists": false }
                    team:
                      - { "exists": true }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "account.team.updated"}'
      # MongoAirdropCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - airdrop
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "airdrop.created"}'
      # MongoAirdropDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - airdrop
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "airdrop.deleted"}'
      # MongoAirdropUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - airdrop
              updateDescription:
                updatedFields:
                  status:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "airdrop.updated"}'
      # MongoAirdropSent
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - airdrop
              updateDescription:
                updatedFields:
                  status:
                    - complete
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "airdrop.sent"}'
      # MongoCollectionCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - collection
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "collection.created"}'
      # MongoCollectionDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - collection
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "collection.deleted"}'
      # MongoCollectionUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - collection
              updateDescription:
                updatedFields:
                  status:
                    - new
                    - pending
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "collection.updated"}'
      # MongoCollectionDeployed
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - collection
              updateDescription:
                updatedFields:
                  status:
                    - deployed
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "collection.deployed"}'
      # MongoContactCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - contact
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.created"}'
      # MongoContactDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - contact
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.deleted"}'
      # MongoContactUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - contact
              updateDescription:
                updatedFields:
                  active:
                    - { "exists": false }
                  tags:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.updated"}'
      # MongoContactActivated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - contact
              updateDescription:
                updatedFields:
                  active:
                    - true
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.activated"}'
      # MongoContactArchived
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - contact
              updateDescription:
                updatedFields:
                  active:
                    - false
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.archived"}'
      # MongoContactTagsUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - contact
              updateDescription:
                updatedFields:
                  tags:
                    - { "exists": true }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.updated"}'
      # MongoMintLinkCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - mint_link
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.created"}'
      # MongoMintLinkDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - mint_link
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.deleted"}'
      # MongoMintLinkUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint_link
              updateDescription:
                updatedFields:
                  active:
                    - { "exists": false }
                  tags:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.updated"}'
      # MongoMintLinkActivated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint_link
              updateDescription:
                updatedFields:
                  active:
                    - true
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.enabled"}'
      # MongoMintLinkArchived
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint_link
              updateDescription:
                updatedFields:
                  active:
                    - false
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.disabled"}'
      # MongoMintCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - mint
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint.created"}'
      # MongoMintDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - mint
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint.deleted"}'
      # MongoMintUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint.updated"}'
      # MongoMintFulfilled
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint
              updateDescription:
                updatedFields:
                  wallet_address:
                    - { "exists": true }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint.fulfilled"}'
      # MongoNoteCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - note
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "note.created"}'
      # MongoNoteDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - note
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "note.deleted"}'
      # MongoNoteUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - note
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "note.updated"}'
      # MongoProductCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - product
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.created"}'
      # MongoProductDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - product
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.deleted"}'
      # MongoProductUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - product
              updateDescription:
                updatedFields:
                  active:
                    - { "exists": false }
                  tags:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.updated"}'
      # MongoProductActivated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - product
              updateDescription:
                updatedFields:
                  active:
                    - true
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.activated"}'
      # MongoProductArchived
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - product
              updateDescription:
                updatedFields:
                  active:
                    - false
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.archived"}'
      # MongoUserCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - user
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "user.created"}'
      # MongoUserLogin
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - user
              updateDescription:
                updatedFields:
                  last_login:
                    - { "exists": true }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "user.login"}'
      # MongoUserUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - user
              updateDescription:
                updatedFields:
                  active:
                    - { "exists": false }
                  last_login:
                    - { "exists": false }
                  tags:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "user.updated"}'
      # MongoUserDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - user
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "user.deleted"}'
      # MongoWebhookCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - webhook
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "webhook.created"}'
      # MongoWebhookDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - webhook
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "webhook.deleted"}'
      # MongoWebhookUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - webhook
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "webhook.updated"}'
  EventSubscriber-Account:
    handler: src.subscribers.account.handler
    name: EventSubscriber-Account
    description: Handle account events
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/versify/bus/arn}
          pattern:
            source:
              - versify
            detail-type:
              - account.created
  EventSubscriber-Billing:
    handler: src.subscribers.billing.handler
    name: EventSubscriber-Billing
    description: Handle stripe billing events
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - stripe
            detail-type:
              - event.created
            detail:
              type:
                - customer.created
                - customer.updated
                - customer.subscription.created
                - customer.subscription.updated
  EventSubscriber-Blockchain:
    handler: src.subscribers.blockchain.handler
    name: EventSubscriber-Blockchain
    description: Handle blockchain transactions
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - tatum
            detail-type:
              - transaction.created
  EventSubscriber-Slack:
    handler: src.subscribers.slack.handler
    name: EventSubscriber-Slack
    description: Consume events and publish to Slack
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            account:
              - ${aws:accountId}
            source:
              - alchemy
              - stripe
              - tatum
      - eventBridge:
          eventBus: ${ssm:/versify/services/versify/bus/arn}
          pattern:
            account:
              - ${aws:accountId}
  EventSubscriber-Webhook:
    handler: src.subscribers.webhook.handler
    name: EventSubscriber-Webhook
    description: Consume events and publish to matching webhooks
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/versify/bus/arn}
          pattern:
            source:
              - versify

resources:
  Resources:
    # Versify Bus
    VersifyBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: !Sub "versify"
    VersifyBusArnParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: !Sub /versify/services/versify/bus/arn
        Type: String
        Value: !GetAtt VersifyBus.Arn
    # Partner Bus
    PartnerBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: "partner"
    PartnerBusArnParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: !Sub /versify/services/partner/bus/arn
        Type: String
        Value: !GetAtt PartnerBus.Arn
    # Mongo Buses
    MongoAccountsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAccountsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAccountsTrigger}"
    MongoAirdropsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAirdropsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAirdropsTrigger}"
    MongoCollectionsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoCollectionsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoCollectionsTrigger}"
    MongoContactsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoContactsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoContactsTrigger}"
    MongoEventsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoEventsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoEventsTrigger}"
    MongoMintLinksBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintLinksTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintLinksTrigger}"
    MongoMintsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintsTrigger}"
    MongoNotesBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoNotesTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoNotesTrigger}"
    MongoProductsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoProductsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoProductsTrigger}"
    MongoUsersBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoUsersTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoUsersTrigger}"
    MongoWebhooksBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoWebhooksTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoWebhooksTrigger}"
    # DLQ
    EventDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: EventDeadLetterQueue
    EventDeadLetterQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Sid: OwnerStatement
              Action:
                - "sqs:*"
              Effect: Allow
              Resource: !GetAtt EventDeadLetterQueue.Arn
              Principal:
                AWS:
                  - !Sub ${AWS::AccountId}
            - Sid: EventRuleDlqStatement
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt EventDeadLetterQueue.Arn
              Principal:
                Service: events.amazonaws.com
              Condition:
                ArnEquals:
                  "aws:SourceArn": "*"
        Queues:
          - !Ref EventDeadLetterQueue
