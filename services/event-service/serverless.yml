org: versify
app: versify
service: event-service

frameworkVersion: ">=2.24.0"

plugins:
  - serverless-python-requirements

custom:
  mongoAccountsTrigger: ${ssm:/versify/services/mongo/accounts/trigger/id}
  mongoAirdropsTrigger: ${ssm:/versify/services/mongo/airdrops/trigger/id}
  mongoCollectionsTrigger: ${ssm:/versify/services/mongo/collections/trigger/id}
  mongoContactsTrigger: ${ssm:/versify/services/mongo/contacts/trigger/id}
  mongoMintLinksTrigger: ${ssm:/versify/services/mongo/mintLinks/trigger/id}
  mongoMintsTrigger: ${ssm:/versify/services/mongo/mints/trigger/id}
  mongoNotesTrigger: ${ssm:/versify/services/mongo/notes/trigger/id}
  mongoEventsTrigger: ${ssm:/versify/services/mongo/events/trigger/id}
  mongoProductsTrigger: ${ssm:/versify/services/mongo/products/trigger/id}
  mongoUsersTrigger: ${ssm:/versify/services/mongo/users/trigger/id}

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  apiGateway:
    restApiId:
      "Fn::ImportValue": VersifyApiId
    restApiRootResourceId:
      "Fn::ImportValue": VersifyApiRootResourceId
  environment:
    LOG_LEVEL: INFO
    ENVIRONMENT: ${opt:stage, 'dev'}
    POWERTOOLS_LOGGER_SAMPLE_RATE: 0.1
    POWERTOOLS_LOGGER_LOG_EVENT: true
    POWERTOOLS_METRICS_NAMESPACE: versify
    POWERTOOLS_SERVICE_NAME: event-service
    POWERTOOLS_TRACE_DISABLED: false
    SECRET_NAME: /versify/platform/secret
  iamRoleStatements:
    - Effect: Allow
      Action:
        - events:*
      Resource:
        - arn:aws:events:${aws:region}:*:event-bus/*
    - Effect: Allow
      Action:
        - execute-api:Invoke
      Resource:
        - "arn:aws:execute-api:us-east-1:*:*/*/*/*"
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource:
        - "arn:aws:secretsmanager:${self:provider.region}:*:secret:/versify/platform/secret*"
  layers:
    - arn:aws:lambda:${aws:region}:017000801446:layer:AWSLambdaPowertoolsPython:22
  runtime: python3.9
  timeout: 30
  tracing:
    lambda: true

functions:
  # Connectors (Consume events from partners and publish to PartnerBus)
  MongoPartnerConnector:
    handler: src.handler.mongo_partner_connector
    name: EventService-MongoPartnerConnector
    description: Consume events from Mongo and publish to PartnerBus
    events:
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAccountsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAirdropsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoCollectionsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoContactsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoEventsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintLinksTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoNotesTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoProductsTrigger}"
          pattern:
            account:
              - ${aws:accountId}
      - eventBridge:
          eventBus: "arn:aws:events:${aws:region}:${aws:accountId}:event-bus/aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoUsersTrigger}"
          pattern:
            account:
              - ${aws:accountId}
  # Webhook Connectors
  AlchemyPartnerConnector:
    handler: src.handler.api
    name: EventService-AlchemyPartnerConnector
    description: Consume events from Alchemy and publish to PartnerBus
    runtime: python3.9
    events:
      - http:
          method: post
          path: /webhook/alchemy
  StripePartnerConnector:
    handler: src.handler.api
    name: EventService-StripePartnerConnector
    description: Consume events from Stripe and publish to PartnerBus
    runtime: python3.9
    events:
      - http:
          method: post
          path: /webhook/stripe
  TatumPartnerConnector:
    handler: src.handler.api
    name: EventService-TatumPartnerConnector
    description: Consume events from Tatum and publish to PartnerBus
    runtime: python3.9
    events:
      - http:
          method: post
          path: /webhook/tatum
  # Versify Connectors
  PartnerVersifyConnector:
    handler: src.handler.partner_versify_connector
    name: EventService-PartnerVersifyConnector
    description: Consume events from PartnerBus and publish to VersifyBus
    events:
      # MongoAccountCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - account
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "account.created"}'
      # MongoAccountDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - account
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "account.deleted"}'
      # MongoAccountUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - account
              updateDescription:
                updatedFields:
                  status:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "account.updated"}'
      # MongoAccountTeamUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - account
              updateDescription:
                updatedFields:
                  settings:
                    auth:
                      - { "exists": false }
                    billing:
                      - { "exists": false }
                    dashboard:
                      - { "exists": false }
                    team:
                      - { "exists": true }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "account.team.updated"}'
      # MongoAirdropCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - airdrop
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "airdrop.created"}'
      # MongoAirdropDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - airdrop
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "airdrop.deleted"}'
      # MongoAirdropUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - airdrop
              updateDescription:
                updatedFields:
                  status:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "airdrop.updated"}'
      # MongoAirdropSent
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - airdrop
              updateDescription:
                updatedFields:
                  status:
                    - sending
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "airdrop.sent"}'
      # MongoCollectionCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - collection
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "collection.created"}'
      # MongoCollectionDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - collection
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "collection.deleted"}'
      # MongoCollectionUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - collection
              updateDescription:
                updatedFields:
                  status:
                    - new
                    - pending
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "collection.updated"}'
      # MongoCollectionDeployed
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - collection
              updateDescription:
                updatedFields:
                  status:
                    - deployed
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "collection.deployed"}'
      # MongoContactCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - contact
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.created"}'
      # MongoContactDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - contact
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.deleted"}'
      # MongoContactUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - contact
              updateDescription:
                updatedFields:
                  active:
                    - { "exists": false }
                  tags:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.updated"}'
      # MongoContactActivated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - contact
              updateDescription:
                updatedFields:
                  active:
                    - true
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.activated"}'
      # MongoContactArchived
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - contact
              updateDescription:
                updatedFields:
                  active:
                    - false
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.archived"}'
      # MongoContactTagsUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - contact
              updateDescription:
                updatedFields:
                  tags:
                    - { "exists": true }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "contact.updated"}'
      # MongoMintLinkCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - mint_link
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.created"}'
      # MongoMintLinkDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - mint_link
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.deleted"}'
      # MongoMintLinkUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint_link
              updateDescription:
                updatedFields:
                  active:
                    - { "exists": false }
                  tags:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.updated"}'
      # MongoMintLinkActivated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint_link
              updateDescription:
                updatedFields:
                  active:
                    - true
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.enabled"}'
      # MongoMintLinkArchived
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint_link
              updateDescription:
                updatedFields:
                  active:
                    - false
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint_link.disabled"}'
      # MongoMintCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - mint
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint.created"}'
      # MongoMintDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - mint
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint.deleted"}'
      # MongoMintUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint.updated"}'
      # MongoMintFulfilled
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - mint
              updateDescription:
                updatedFields:
                  wallet_address:
                    - { "exists": true }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "mint.fulfilled"}'
      # MongoNoteCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - note
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "note.created"}'
      # MongoNoteDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - note
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "note.deleted"}'
      # MongoNoteUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - note
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "note.updated"}'
      # MongoProductCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - product
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.created"}'
      # MongoProductDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - product
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.deleted"}'
      # MongoProductUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - product
              updateDescription:
                updatedFields:
                  active:
                    - { "exists": false }
                  tags:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.updated"}'
      # MongoProductActivated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - product
              updateDescription:
                updatedFields:
                  active:
                    - true
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.activated"}'
      # MongoProductArchived
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - product
              updateDescription:
                updatedFields:
                  active:
                    - false
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "product.archived"}'
      # MongoUserCreated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - insert
              fullDocument:
                object:
                  - user
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "user.created"}'
      # MongoUserDeleted
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - delete
              fullDocumentBeforeChange:
                object:
                  - user
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocumentBeforeChange"
            inputTemplate: '{"detail": <detail>, "detail-type": "user.deleted"}'
      # MongoUserUpdated
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - mongo
            detail:
              operationType:
                - replace
                - update
              fullDocument:
                object:
                  - user
              updateDescription:
                updatedFields:
                  active:
                    - { "exists": false }
                  tags:
                    - { "exists": false }
          inputTransformer:
            inputPathsMap:
              detail: "$.detail.fullDocument"
            inputTemplate: '{"detail": <detail>, "detail-type": "user.updated"}'
  # Processors (Consume events from PartnerBus and call necessary Versify APIs)
  AirdropProcessor:
    handler: src.handler.airdrop_processor
    name: EventService-AirdropProcessor
    description: When a new airdrop is created, mint tokens and notify contacts
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/versify/bus/arn}
          pattern:
            source:
              - versify
            detail-type:
              - airdrop.sent
  BillingProcessor:
    handler: src.handler.billing_processor
    name: EventService-BillingProcessor
    description: When a new stripe billing event is created, update internal systems
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - stripe
            detail-type:
              - event.created
            detail:
              type:
                - customer.created
                - customer.updated
                - customer.subscription.created
                - customer.subscription.updated
  TransactionProcessor:
    handler: src.handler.transaction_processor
    name: EventService-TransactionProcessor
    description: When a new blockchain transaction is created, update corresponding collection or mint
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            source:
              - tatum
            detail-type:
              - transaction.created
  UsageProcessor:
    handler: src.handler.usage_processor
    name: EventService-UsageProcessor
    description: When a new mint is created, record the usage in stripe billing
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/versify/bus/arn}
          pattern:
            source:
              - versify
            detail-type:
              - mint.created
  # Subscribers (Consume events from VersifyBus and publish elsewhere)
  SlackSubscriber:
    handler: src.handler.slack_subscriber
    name: EventService-SlackSubscriber
    description: Consume events and publish to Slack
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/partner/bus/arn}
          pattern:
            account:
              - ${aws:accountId}
            source:
              - alchemy
              - stripe
              - tatum
      - eventBridge:
          eventBus: ${ssm:/versify/services/versify/bus/arn}
          pattern:
            account:
              - ${aws:accountId}
  WebhookSubscriber:
    handler: src.handler.webhook_subscriber
    name: EventService-WebhookSubscriber
    description: Consume events and publish to matching webhooks
    events:
      - eventBridge:
          eventBus: ${ssm:/versify/services/versify/bus/arn}
          pattern:
            source:
              - versify

resources:
  Resources:
    # Versify Bus
    VersifyBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: !Sub "versify"
    VersifyBusArnParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: !Sub /versify/services/versify/bus/arn
        Type: String
        Value: !GetAtt VersifyBus.Arn
    # Partner Bus
    PartnerBus:
      Type: AWS::Events::EventBus
      Properties:
        Name: "partner"
    PartnerBusArnParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: !Sub /versify/services/partner/bus/arn
        Type: String
        Value: !GetAtt PartnerBus.Arn
    # Mongo Buses
    MongoAccountsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAccountsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAccountsTrigger}"
    MongoAirdropsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAirdropsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoAirdropsTrigger}"
    MongoCollectionsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoCollectionsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoCollectionsTrigger}"
    MongoContactsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoContactsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoContactsTrigger}"
    MongoEventsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoEventsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoEventsTrigger}"
    MongoMintLinksBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintLinksTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintLinksTrigger}"
    MongoMintsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoMintsTrigger}"
    MongoNotesBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoNotesTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoNotesTrigger}"
    MongoProductsBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoProductsTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoProductsTrigger}"
    MongoUsersBus:
      Type: AWS::Events::EventBus
      Properties:
        EventSourceName: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoUsersTrigger}"
        Name: "aws.partner/mongodb.com/stitch.trigger/${self:custom.mongoUsersTrigger}"
    # DLQ
    EventDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: EventDeadLetterQueue
    EventDeadLetterQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Statement:
            - Sid: OwnerStatement
              Action:
                - "sqs:*"
              Effect: Allow
              Resource: !GetAtt EventDeadLetterQueue.Arn
              Principal:
                AWS:
                  - !Sub ${AWS::AccountId}
            - Sid: EventRuleDlqStatement
              Action:
                - sqs:SendMessage
              Effect: Allow
              Resource: !GetAtt EventDeadLetterQueue.Arn
              Principal:
                Service: events.amazonaws.com
              Condition:
                ArnEquals:
                  "aws:SourceArn": "*"
        Queues:
          - !Ref EventDeadLetterQueue
